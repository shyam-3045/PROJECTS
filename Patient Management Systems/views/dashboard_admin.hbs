<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Hospital Admin Dashboard</title>
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
    rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
    crossorigin="anonymous"
  />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f9f9f9;
    }

    /* Dashboard Layout */
    .dashboard-container {
      display: flex;
      min-height: 100vh;
    }

    /* Sidebar Styles */
    .sidebar {
      width: 250px;
      background-color: #2c3e50;
      color: white;
      position: fixed;
      height: 100%;
      overflow-y: auto;
      transition: all 0.3s ease;
    }

    .brand {
      padding: 20px;
      background-color: #1a2530;
      text-align: center;
      font-weight: bold;
      font-size: 1.2rem;
      color: #17a2b8;
      border-bottom: 1px solid #3d5a73;
    }

    .sidebar-menu {
      padding: 0;
      list-style: none;
      margin-top: 20px;
    }

    .sidebar-menu li {
      margin-bottom: 5px;
    }

    .sidebar-menu a {
      display: block;
      padding: 12px 20px;
      color: #ecf0f1;
      text-decoration: none;
      transition: all 0.3s ease;
      border-left: 4px solid transparent;
    }

    .sidebar-menu a:hover, .sidebar-menu a.active {
      background-color: #34495e;
      border-left-color: #17a2b8;
    }

    .sidebar-menu i {
      margin-right: 10px;
      width: 20px;
      text-align: center;
    }

    /* Main Content Area */
    .main-content {
      flex: 1;
      margin-left: 250px;
      padding: 20px;
    }

    /* Page Header */
    .page-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      padding-bottom: 10px;
      border-bottom: 1px solid #e2e8f0;
    }

    .page-header h1 {
      font-size: 1.5rem;
      color: #2d3748;
      margin: 0;
    }

    .add-new-btn {
      background-color: #17a2b8;
      color: white;
      border: none;
      border-radius: 4px;
      padding: 8px 16px;
      cursor: pointer;
      font-weight: 500;
      display: flex;
      align-items: center;
    }

    .add-new-btn i {
      margin-right: 5px;
    }

    .add-new-btn:hover {
      background-color: #138496;
    }

    /* Table Container */
    .table-container {
      background-color: white;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
      margin-bottom: 20px;
    }

    /* Table Styles */
    .custom-table {
      width: 100%;
      border-collapse: collapse;
    }

    .custom-table th {
      text-align: left;
      padding: 12px 15px;
      background-color: #f7fafc;
      color: #4a5568;
      font-weight: 600;
      border-bottom: 1px solid #e2e8f0;
    }

    .custom-table td {
      padding: 12px 15px;
      border-bottom: 1px solid #e2e8f0;
      color: #4a5568;
    }

    .custom-table tr:last-child td {
      border-bottom: none;
    }

    .custom-table tr:hover {
      background-color: #f7fafc;
    }

    /* Action Buttons */
    .action-btns {
      display: flex;
      gap: 5px;
    }

    .edit-btn, .delete-btn {
      border: none;
      border-radius: 4px;
      padding: 5px 10px;
      cursor: pointer;
      font-size: 0.85rem;
    }

    .edit-btn {
      background-color: #3498db;
      color: white;
    }

    .edit-btn:hover {
      background-color: #2980b9;
    }

    .delete-btn {
      background-color: #e74c3c;
      color: white;
    }

    .delete-btn:hover {
      background-color: #c0392b;
    }

    /* Modal Styles */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      overflow: auto;
    }

    .modal-content {
      background-color: white;
      margin: 5% auto;
      width: 500px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      position: relative;
      animation: modalAppear 0.3s ease;
    }

    @keyframes modalAppear {
      from { opacity: 0; transform: translateY(-30px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .modal-header {
      padding: 15px 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #e2e8f0;
    }

    .modal-header h2 {
      font-size: 1.25rem;
      color: #2d3748;
      font-weight: 500;
      margin: 0;
    }

    .close-btn {
      font-size: 1.5rem;
      cursor: pointer;
      color: #718096;
      background: none;
      border: none;
      padding: 0;
    }

    .close-btn:hover {
      color: #2d3748;
    }

    .modal-body {
      padding: 20px;
    }

    .form-group {
      margin-bottom: 15px;
    }

    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: 500;
      color: #4a5568;
    }

    .form-control {
      width: 100%;
      padding: 8px 12px;
      border: 1px solid #cbd5e0;
      border-radius: 4px;
      font-size: 0.9rem;
    }

    .form-control:focus {
      border-color: #3182ce;
      outline: none;
      box-shadow: 0 0 0 3px rgba(49, 130, 206, 0.1);
    }

    .modal-footer {
      padding: 15px 20px;
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      border-top: 1px solid #e2e8f0;
    }

    .save-btn {
      background-color: #17a2b8;
      color: white;
      border: none;
      border-radius: 4px;
      padding: 8px 16px;
      cursor: pointer;
      font-weight: 500;
    }

    .save-btn:hover {
      background-color: #138496;
    }

    .cancel-btn {
      background-color: #e2e8f0;
      color: #4a5568;
      border: none;
      border-radius: 4px;
      padding: 8px 16px;
      cursor: pointer;
      font-weight: 500;
    }

    .cancel-btn:hover {
      background-color: #cbd5e0;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      .sidebar {
        width: 70px;
      }
      
      .brand {
        font-size: 0;
        padding: 20px 0;
      }
      
      .brand::first-letter {
        font-size: 1.5rem;
      }
      
      .sidebar-menu a span {
        display: none;
      }
      
      .sidebar-menu i {
        margin-right: 0;
        font-size: 1.2rem;
      }
      
      .main-content {
        margin-left: 70px;
      }
    }

    /* Tab system for content */
    .content-section {
      display: none;
    }

    .content-section.active {
      display: block;
    }

    /* Search Box */
    .search-box {
      position: relative;
      margin-bottom: 20px;
    }

    .search-box input {
      width: 100%;
      padding: 10px 15px 10px 40px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 14px;
    }

    .search-box i {
      position: absolute;
      left: 15px;
      top: 50%;
      transform: translateY(-50%);
      color: #718096;
    }

    /* Dashboard Cards */
    .stats-container {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin-bottom: 20px;
    }

    .stat-card {
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
      padding: 20px;
      display: flex;
      align-items: center;
    }

    .stat-icon {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 15px;
      font-size: 1.5rem;
    }

    .stat-info h3 {
      font-size: 1.5rem;
      margin: 0 0 5px 0;
    }

    .stat-info p {
      margin: 0;
      color: #718096;
      font-size: 0.9rem;
    }

    .patients-icon {
      background-color: rgba(52, 152, 219, 0.1);
      color: #3498db;
    }

    .doctors-icon {
      background-color: rgba(46, 204, 113, 0.1);
      color: #2ecc71;
    }

    .inventory-icon {
      background-color: rgba(155, 89, 182, 0.1);
      color: #9b59b6;
    }

    .appointments-icon {
      background-color: rgba(241, 196, 15, 0.1);
      color: #f1c40f;
    }

    /* Status Labels */
    .status-label {
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 0.75rem;
      font-weight: 500;
    }

    .status-active {
      background-color: #d4edda;
      color: #155724;
    }

    .status-inactive {
      background-color: #f8d7da;
      color: #721c24;
    }

    .status-low {
      background-color: #f8d7da;
      color: #721c24;
    }

    .status-medium {
      background-color: #fff3cd;
      color: #856404;
    }

    .status-high {
      background-color: #d4edda;
      color: #155724;
    }
  </style>
</head>
<body>
  <div class="dashboard-container">
    <!-- Sidebar -->
    <div class="sidebar">
      <div class="brand">MEDICARE HOSPITAL</div>
      <ul class="sidebar-menu">
        <li>
          <a href="#" class="active" data-page="dashboard">
            <i class="fas fa-tachometer-alt"></i>
            <span>Dashboard</span>
          </a>
        </li>
        <li>
          <a href="#" data-page="patients">
            <i class="fas fa-user-injured"></i>
            <span>Patients</span>
          </a>
        </li>
        <li>
          <a href="#" data-page="doctors">
            <i class="fas fa-user-md"></i>
            <span>Doctors</span>
          </a>
        </li>
        <li>
          <a href="#" data-page="inventory">
            <i class="fas fa-pills"></i>
            <span>Inventory</span>
          </a>
        </li>
        
        <li>
          <a href="/logout">
            <i class="fas fa-sign-out-alt"></i>
            <span>Logout</span>
          </a>
        </li>
      </ul>
    </div>

    <!-- Main Content -->
    <div class="main-content">
      <!-- Dashboard Section -->
      <div id="dashboard" class="content-section active">
        <div class="page-header">
          <h1>Dashboard</h1>
          <div class="user-info">
            <span>{{this.user.name}}</span>
          </div>
        </div>

        <!-- Dashboard Stats -->
        <div class="stats-container">
          <div class="stat-card">
            <div class="stat-icon patients-icon">
              <i class="fas fa-user-injured"></i>
            </div>
            <div class="stat-info">
              <h3>{{this.total_patient}}</h3>
              <p>Total Patients</p>
            </div>
          </div>
          <div class="stat-card">
            <div class="stat-icon doctors-icon">
              <i class="fas fa-user-md"></i>
            </div>
            <div class="stat-info">
              <h3>{{this.total_doc}}</h3>
              <p>Total Doctors</p>
            </div>
          </div>
          <div class="stat-card">
            <div class="stat-icon inventory-icon">
              <i class="fas fa-pills"></i>
            </div>
            <div class="stat-info">
              <h3>{{this.total_med}}</h3>
              <p>Medicine Items</p>
            </div>
          </div>
          <div class="stat-card">
            <div class="stat-icon appointments-icon">
              <i class="fas fa-calendar-check"></i>
            </div>
            <div class="stat-info">
              <h3>{{this.total_app}}</h3>
              <p>Total Appointments</p>
            </div>
          </div>
        </div>

        <!-- Recent Patients -->
        <div class="table-container">
          <h2 style="padding: 15px; margin: 0; border-bottom: 1px solid #e2e8f0; font-size: 1.2rem;">Recent Patients</h2>
          <table class="custom-table">
            <thead>
              <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Age</th>
                <th>Phone</th>
                <th>Gender</th>
                <th>Health Condition</th>
              </tr>
            </thead>
            <tbody>
              {{#each Patients}}
              <tr>
                <td>{{this.Patient_ID}}</td>
                <td>{{this.Name}}</td>
                <td>{{this.Age}}</td>
                <td>{{this.Phone}}</td>
                <td>{{this.Gender}}</td>
                <td>{{this.Health_Conditions}}</td>
              </tr>
              {{/each}}
            </tbody>
          </table>
        </div>
      </div>

      <!-- Patients Section -->
      <div id="patients" class="content-section">
        <div class="page-header">
          <h1>Patients Management</h1>
          </form>
          
        </div>

        <div class="search-box">
          <i class="fas fa-search"></i>
          <input type="text" placeholder="Search patients...">
        </div>

        <div class="table-container">
          <table class="custom-table">
            <thead>
              <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Age</th>
                <th>Gender</th>
                <th>Contact</th>
                <th>Email</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                {{#each Patients}}
                <td>{{this.Patient_ID}}</td>
                <td>{{this.Name}}</td>
                <td>{{this.Age}}</td>
                <td>{{this.Gender}}</td>
                <td>{{this.Phone}}</td>
                <td>{{this.Email}}</td>
                <td><span class="status-label status-active">Active</span></td>
                <td>
                  <div class="action-btns">
                    <button class="edit-btn edit-patient-btn" value="{{this.Patient_ID}}">
                      <i class="fas fa-edit"></i>
                    </button>
					<form action="/del_pat_admin/{{this.Patient_ID}}" method="POST">
						<button class="delete-btn delete-patient-btn" value="{{this.Patient_ID}}">
                      	<i class="fas fa-trash"></i>
                    	</button>

					</form>
                    
                  </div>
                </td>
                
              </tr>
              {{/each}}
              
            </tbody>
          </table>
        </div>
      </div>

      <!-- Doctors Section -->
      <div id="doctors" class="content-section">
        <div class="page-header">
          <h1>Doctors Management</h1>
          </button>
        </div>

        <div class="search-box">
          <i class="fas fa-search"></i>
          <input type="text" placeholder="Search doctors...">
        </div>

        <div class="table-container">
          <table class="custom-table">
            <thead>
              <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Specialty</th>
                <th>Contact</th>
                <th>Email</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {{#each Doctors}}
              <tr>
                <td>{{this.Doctor_ID}}</td>
                <td>{{this.Name}}</td>
                <td>{{this.Specialization}}</td>
                <td>{{this.Phone}}</td>
                <td>{{this.Email}}</td>
                <td><span class="status-label status-active">Active</span></td>
                <td>
                  <div class="action-btns">
                    <button class="edit-btn edit-doctor-btn" value="{{this.Doctor_ID}}">
                      <i class="fas fa-edit"></i>
                    </button>
					<form action="/del_doc_admin/{{this.Doctor_ID}}" method="POST">
						<button class="delete-btn delete-doctor-btn" value="{{this.Doctor_ID}}" >
                      	<i class="fas fa-trash"></i>
                    	</button>
					</form>
                    
                  </div>
                </td>
              </tr>
              {{/each}}
              
            </tbody>
          </table>
        </div>
      </div>

      <!-- Inventory Section -->
      <div id="inventory" class="content-section">
        <div class="page-header">
          <h1>Inventory Management</h1>
          <button class="add-new-btn" id="add-medicine-btn">
            <i class="fas fa-plus"></i> Add Medicine
          </button>
        </div>

        <div class="search-box">
          <i class="fas fa-search"></i>
          <input type="text" placeholder="Search inventory...">
        </div>

        <div class="table-container">
          <table class="custom-table">
            <thead>
              <tr>
                <th>ID</th>
                <th>Medicine Name</th>
                <th>Unit Price</th>
                <th>Stock</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {{#each Inventory}}
              <tr>
                <td>{{this.Medicine_ID}}</td>
                <td>{{this.Medicine_name}}</td>
                <td>{{this.Price}}</td>
                <td>{{this.Qty}}</td>
                <td><span class="status-label status-high">{{this.status}}</span></td>
                <td>
                  <div class="action-btns">
                    </button>
					<form action="/del_med_admin/{{this.Medicine_ID}}" method="POST">
						<button class="delete-btn delete-medicine-btn" value="{{this.Medicine_ID}}">
                      	<i class="fas fa-trash"></i>
                    	</button>

					</form>
						
					
                    
                  </div>
                </td>
                </tr>
                {{/each}}
              
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal for Adding/Editing Patient -->
  <div id="patient-modal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 id="patient-modal-title">Add New Patient</h2>
        <button class="close-btn">&times;</button>
      </div>
      <div class="modal-body">
        <form id="patient-form" action="/edit_pat_med/{{userId}}" method="POST">
          <div class="form-group">
            <label for="patient-id">Patient ID</label>
            <input  name="id"  type="text" id="patient-id" class="form-control"  >
          </div>
          <div class="form-group">
            <label for="patient-name">Full Name</label>
            <input name="name"  type="text" id="patient-name" class="form-control" >
          </div>
          <div class="form-group">
            <label for="patient-age">Age</label>
            <input name="age" type="number" id="patient-age" class="form-control" required>
          </div>
          <div class="form-group">
            <label for="patient-gender">Gender</label>
            <select name="Gender" id="patient-gender" class="form-control" required>
              <option value="">Select Gender</option>
              <option value="Male">Male</option>
              <option value="Female">Female</option>
              <option value="Other">Other</option>
            </select>
          </div>
          <div class="form-group">
            <label for="patient-contact">Contact</label>
            <input name="Phone" type="tel" id="patient-contact" class="form-control" required>
          </div>
          <div class="form-group">
            <label for="patient-address">Email</label>
            <textarea  name="Email" id="patient-address" class="form-control" rows="2" required></textarea>
          </div>
          <div class="form-group">
            <label for="patient-status">Status</label>
            <select name="status" id="patient-status" class="form-control" required>
              <option value="">Select Status</option>
              <option value="Active">Active</option>
              <option value="Inactive">Inactive</option>
            </select>
          </div>
          <div class="modal-footer">
        <button class="cancel-btn">Cancel</button>
        <button class="save-btn" id="save-patient-btn">Save</button>
      </div>
        </form>
      </div>
      
    </div>
  </div>

  <!-- Modal for Adding/Editing Doctor -->
  <div id="doctor-modal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 id="doctor-modal-title">Add New Doctor</h2>
        <button class="close-btn">&times;</button>
      </div>
      <div class="modal-body">
        <form id="doctor-form" action="/edit_doc_med/{{userId}}" method="POST">
          <div class="form-group">
            <label for="doctor-id">Doctor ID</label>
            <input name="id" type="text" id="doctor-id" class="form-control" >
          </div>
          <div class="form-group">
            <label for="doctor-name">Full Name</label>
            <input name="name" type="text" id="doctor-name" class="form-control" required>
          </div>
          <div class="form-group">
            <label for="doctor-specialty">Specialty</label>
            <input name="spec" type="text" id="doctor-specialty" class="form-control" required>
          </div>
          <div class="form-group">
            <label for="doctor-contact">Contact</label>
            <input name="phone" type="tel" id="doctor-contact" class="form-control" required>
          </div>
          <div class="form-group">
            <label for="doctor-email">Email</label>
            <input name="email" type="email" id="doctor-email" class="form-control" required>
          </div>
          <div class="form-group">
            <label for="doctor-status">Status</label>
            <select name="status" id="doctor-status" class="form-control" required>
              <option value="">Select Status</option>
              <option value="Active">Active</option>
              <option value="Inactive">Inactive</option>
            </select>
          </div>
          <div class="modal-footer">
        <button class="cancel-btn">Cancel</button>
        <button class="save-btn" id="save-doctor-btn">Save</button>
      </div>
        </form>
      </div>
      
    </div>
  </div>

  <!-- Modal for Adding/Editing Medicine -->
  <div id="medicine-modal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 id="medicine-modal-title">Add New Medicine</h2>
        <button class="close-btn">&times;</button>
      </div>
      <div class="modal-body">
        <form id="medicine-form" action="/add_med/{{userId}}" method="POST">
          <div class="form-group">
            <label for="medicine-id">Medicine ID</label>
            <input name="id"   type="text" id="medicine-id" class="form-control" >
          </div>
          <div class="form-group">
            <label for="medicine-name">Medicine Name</label>
            <input name="name" type="text" id="medicine-name" class="form-control" required>
          </div>
          <div class="form-group">
            <label for="medicine-category">stock</label>
            <input name="stock"  type="text" id="medicine-category" class="form-control" required>
          </div>
          <div class="form-group">
            <label for="medicine-stock">price</label>
            <input name="price" type="number" id="medicine-stock" class="form-control" required>
          </div>
          <div class="form-group">
            <label for="medicine-price">status</label>
            <input name="status" type="text" id="medicine-price"  class="form-control" required>
          </div>
          <div class="form-group">
          </div>
          <div class="modal-footer">
          <button class="cancel-btn">Cancel</button>
          <button class="save-btn" id="save-medicine-btn">Save</button>
      </div>
        </form>
      </div>
      
    </div>
  </div>

  <!-- JavaScript -->
  <script>
    // Navigation between tabs
document.addEventListener('DOMContentLoaded', function() {
  const menuItems = document.querySelectorAll('.sidebar-menu a[data-page]');
  const contentSections = document.querySelectorAll('.content-section');
  
  menuItems.forEach(item => {
    item.addEventListener('click', function(e) {
      e.preventDefault();
      
      // Remove active class from all menu items
      menuItems.forEach(menuItem => {
        menuItem.classList.remove('active');
      });
      
      // Add active class to clicked menu item
      this.classList.add('active');
      
      // Hide all content sections
      contentSections.forEach(section => {
        section.classList.remove('active');
      });
      
      // Show the selected content section
      const targetPage = this.getAttribute('data-page');
      document.getElementById(targetPage).classList.add('active');
    });
  });
  
  // Modal functionality
  const modals = document.querySelectorAll('.modal');
  const closeBtns = document.querySelectorAll('.close-btn, .cancel-btn');
  
  // Generate IDs
  function generateID(prefix) {
    // Get the highest existing ID number and increment by 1
    let highestNum = 0;
    
    if (prefix === 'P') {
      const patientRows = document.querySelectorAll('#patients-table tbody tr');
      patientRows.forEach(row => {
        const id = row.cells[0].textContent;
        const num = parseInt(id.replace('P', ''));
        if (num > highestNum) highestNum = num;
      });
    } else if (prefix === 'D') {
      const doctorRows = document.querySelectorAll('#doctors-table tbody tr');
      doctorRows.forEach(row => {
        const id = row.cells[0].textContent;
        const num = parseInt(id.replace('D', ''));
        if (num > highestNum) highestNum = num;
      });
    } else if (prefix === 'M') {
      const medicineRows = document.querySelectorAll('#medicines-table tbody tr');
      medicineRows.forEach(row => {
        const id = row.cells[0].textContent;
        const num = parseInt(id.replace('M', ''));
        if (num > highestNum) highestNum = num;
      });
    }
    
    // Format the number with leading zeros
    const nextNum = highestNum + 1;
    const formattedNum = nextNum.toString().padStart(3, '0');
    return prefix + formattedNum;
  }
  
  // Open Patient Modal
  document.getElementById('add-patient-btn').addEventListener('click', function() {
    document.getElementById('patient-modal-title').textContent = 'Add New Patient';
    document.getElementById('patient-form').reset();
    
    // Generate new ID for patient
    const newId = generateID('P');
    document.getElementById('patient-id').value = newId;
    
    // Hide the ID field when adding a new patient
    document.getElementById('patient-id').parentElement.style.display = 'block';
    document.getElementById('patient-id').readOnly = true;
    
    document.getElementById('patient-modal').style.display = 'block';
  });
  
  // Open Doctor Modal
  document.getElementById('add-doctor-btn').addEventListener('click', function() {
    document.getElementById('doctor-modal-title').textContent = 'Add New Doctor';
    document.getElementById('doctor-form').reset();
    
    // Generate new ID for doctor
    const newId = generateID('D');
    document.getElementById('doctor-id').value = newId;
    
    // Hide the ID field when adding a new doctor
    document.getElementById('doctor-id').parentElement.style.display = 'block';
    document.getElementById('doctor-id').readOnly = true;
    
    document.getElementById('doctor-modal').style.display = 'block';
  });
  
  // Open Medicine Modal
  document.getElementById('add-medicine-btn').addEventListener('click', function() {
    document.getElementById('medicine-modal-title').textContent = 'Add New Medicine';
    document.getElementById('medicine-form').reset();
    
    // Generate new ID for medicine
    const newId = generateID('M');
    document.getElementById('medicine-id').value = newId;
    
    // Hide the ID field when adding a new medicine
    document.getElementById('medicine-id').parentElement.style.display = 'block';
    document.getElementById('medicine-id').readOnly = true;
    
    document.getElementById('medicine-modal').style.display = 'block';
  });
  
  // Close modals
  closeBtns.forEach(btn => {
    btn.addEventListener('click', function() {
      modals.forEach(modal => {
        modal.style.display = 'none';
      });
    });
  });
  
  // Close modal when clicking outside
  window.addEventListener('click', function(event) {
    modals.forEach(modal => {
      if (event.target == modal) {
        modal.style.display = 'none';
      }
    });
  });
  
  // Edit Patient buttons
  const editPatientBtns = document.querySelectorAll('.edit-patient-btn');
  editPatientBtns.forEach(btn => {
    btn.addEventListener('click', function() {
      const row = this.closest('tr');
      const patientId = row.cells[0].textContent;
      document.getElementById('patient-modal-title').textContent = 'Edit Patient';
      document.getElementById('patient-id').value = patientId;
      
      // Fill the form with data from the selected row
      document.getElementById('patient-name').value = row.cells[1].textContent;
      document.getElementById('patient-age').value = row.cells[2].textContent;
      document.getElementById('patient-gender').value = row.cells[3].textContent;
      document.getElementById('patient-contact').value = row.cells[4].textContent;
      document.getElementById('patient-address').value = row.cells[5].textContent;
      document.getElementById('patient-status').value = row.cells[6].textContent.includes('Active') ? 'Active' : 'Inactive';
      
      // Show the ID field for editing but make it read-only
      document.getElementById('patient-id').parentElement.style.display = 'block';
      document.getElementById('patient-id').readOnly = true;
      document.getElementById('patient-modal').style.display = 'block';
    });
  });
  
  // Edit Doctor buttons
  const editDoctorBtns = document.querySelectorAll('.edit-doctor-btn');
  editDoctorBtns.forEach(btn => {
    btn.addEventListener('click', function() {
      const row = this.closest('tr');
      const doctorId = row.cells[0].textContent;
      document.getElementById('doctor-modal-title').textContent = 'Edit Doctor';
      document.getElementById('doctor-id').value = doctorId;
      
      // Fill the form with data from the selected row
      document.getElementById('doctor-name').value = row.cells[1].textContent;
      document.getElementById('doctor-specialty').value = row.cells[2].textContent;
      document.getElementById('doctor-contact').value = row.cells[3].textContent;
      document.getElementById('doctor-email').value = row.cells[4].textContent;
      document.getElementById('doctor-status').value = row.cells[5].textContent.includes('Active') ? 'Active' : 'Inactive';
      
      // Show the ID field for editing but make it read-only
      document.getElementById('doctor-id').parentElement.style.display = 'block';
      document.getElementById('doctor-id').readOnly = true;
      document.getElementById('doctor-modal').style.display = 'block';
    });
  });
  
  // Edit Medicine buttons
  const editMedicineBtns = document.querySelectorAll('.edit-medicine-btn');
  editMedicineBtns.forEach(btn => {
    btn.addEventListener('click', function() {
      const row = this.closest('tr');
      const medicineId = row.cells[0].textContent;
      document.getElementById('medicine-modal-title').textContent = 'Edit Medicine';
      document.getElementById('medicine-id').value = medicineId;
      
      // Fill the form with data from the selected row
      document.getElementById('medicine-name').value = row.cells[1].textContent;
      document.getElementById('medicine-price').value = row.cells[2].textContent.replace('$', '');
      document.getElementById('medicine-stock').value = row.cells[3].textContent;
      document.getElementById('medicine-category').value = row.cells[4] ? row.cells[4].textContent : '';
      document.getElementById('medicine-expiry').value = row.cells[5] ? row.cells[5].textContent : '';
      
      // Show the ID field for editing but make it read-only
      document.getElementById('medicine-id').parentElement.style.display = 'block';
      document.getElementById('medicine-id').readOnly = true;
      document.getElementById('medicine-modal').style.display = 'block';
    });
  });
  
  
  
  // Save Patient button
  document.getElementById('save-patient-btn').addEventListener('click', function() {
    const patientId = document.getElementById('patient-id').value;
    const patientName = document.getElementById('patient-name').value;
    const patientAge = document.getElementById('patient-age').value;
    const patientGender = document.getElementById('patient-gender').value;
    const patientContact = document.getElementById('patient-contact').value;
    const patientAddress = document.getElementById('patient-address').value;
    const patientStatus = document.getElementById('patient-status').value;
    
    // Validate form data
    if (!patientName || !patientAge || !patientGender || !patientContact) {
      alert('Please fill in all required fields.');
      return;
    }
    
    // Find if patient already exists
    let existingRow = null;
    const patientRows = document.querySelectorAll('#patients-table tbody tr');
    patientRows.forEach(row => {
      if (row.cells[0].textContent === patientId) {
        existingRow = row;
      }
    });
    
    if (existingRow) {
      // Update existing row
      existingRow.cells[1].textContent = patientName;
      existingRow.cells[2].textContent = patientAge;
      existingRow.cells[3].textContent = patientGender;
      existingRow.cells[4].textContent = patientContact;
      existingRow.cells[5].textContent = patientAddress;
      existingRow.cells[6].innerHTML = patientStatus === 'Active' ? 
        '<span class="status-active">Active</span>' : 
        '<span class="status-inactive">Inactive</span>';
      alert('Patient updated successfully!');
    } else {
      // Add new row
      const patientsTable = document.querySelector('#patients-table tbody');
      const newRow = document.createElement('tr');
      newRow.innerHTML = `
        <td>${patientId}</td>
        <td>${patientName}</td>
        <td>${patientAge}</td>
        <td>${patientGender}</td>
        <td>${patientContact}</td>
        <td>${patientAddress}</td>
        <td>${patientStatus === 'Active' ? 
          '<span class="status-active">Active</span>' : 
          '<span class="status-inactive">Inactive</span>'}</td>
        <td>
          <button class="btn edit-patient-btn" data-id="${patientId}">Edit</button>
          <button class="btn delete-patient-btn" data-id="${patientId}">Delete</button>
        </td>
      `;
      patientsTable.appendChild(newRow);
      
      // Add event listeners to new buttons
      const newEditBtn = newRow.querySelector('.edit-patient-btn');
      newEditBtn.addEventListener('click', function() {
        const row = this.closest('tr');
        const patientId = row.cells[0].textContent;
        document.getElementById('patient-modal-title').textContent = 'Edit Patient';
        document.getElementById('patient-id').value = patientId;
        
        document.getElementById('patient-name').value = row.cells[1].textContent;
        document.getElementById('patient-age').value = row.cells[2].textContent;
        document.getElementById('patient-gender').value = row.cells[3].textContent;
        document.getElementById('patient-contact').value = row.cells[4].textContent;
        document.getElementById('patient-address').value = row.cells[5].textContent;
        document.getElementById('patient-status').value = row.cells[6].textContent.includes('Active') ? 'Active' : 'Inactive';
        
        document.getElementById('patient-id').parentElement.style.display = 'block';
        document.getElementById('patient-id').readOnly = true;
        document.getElementById('patient-modal').style.display = 'block';
      });
      
      alert('Patient added successfully!');
    }
    
    // Close modal
    document.getElementById('patient-modal').style.display = 'none';
  });
  
  // Save Doctor button
  document.getElementById('save-doctor-btn').addEventListener('click', function() {
    const doctorId = document.getElementById('doctor-id').value;
    const doctorName = document.getElementById('doctor-name').value;
    const doctorSpecialty = document.getElementById('doctor-specialty').value;
    const doctorContact = document.getElementById('doctor-contact').value;
    const doctorEmail = document.getElementById('doctor-email').value;
    const doctorStatus = document.getElementById('doctor-status').value;
    
    // Validate form data
    if (!doctorName || !doctorSpecialty || !doctorContact || !doctorEmail) {
      alert('Please fill in all required fields.');
      return;
    }
    
    // Find if doctor already exists
    let existingRow = null;
    const doctorRows = document.querySelectorAll('#doctors-table tbody tr');
    doctorRows.forEach(row => {
      if (row.cells[0].textContent === doctorId) {
        existingRow = row;
      }
    });
    
    if (existingRow) {
      // Update existing row
      existingRow.cells[1].textContent = doctorName;
      existingRow.cells[2].textContent = doctorSpecialty;
      existingRow.cells[3].textContent = doctorContact;
      existingRow.cells[4].textContent = doctorEmail;
      existingRow.cells[5].innerHTML = doctorStatus === 'Active' ? 
        '<span class="status-active">Active</span>' : 
        '<span class="status-inactive">Inactive</span>';
      alert('Doctor updated successfully!');
    } else {
      // Add new row
      const doctorsTable = document.querySelector('#doctors-table tbody');
      const newRow = document.createElement('tr');
      newRow.innerHTML = `
        <td>${doctorId}</td>
        <td>${doctorName}</td>
        <td>${doctorSpecialty}</td>
        <td>${doctorContact}</td>
        <td>${doctorEmail}</td>
        <td>${doctorStatus === 'Active' ? 
          '<span class="status-active">Active</span>' : 
          '<span class="status-inactive">Inactive</span>'}</td>
        <td>
          <button class="btn edit-doctor-btn" data-id="${doctorId}">Edit</button>
          <button class="btn delete-doctor-btn" data-id="${doctorId}">Delete</button>
        </td>
      `;
      doctorsTable.appendChild(newRow);
      
      // Add event listeners to new buttons
      const newEditBtn = newRow.querySelector('.edit-doctor-btn');
      newEditBtn.addEventListener('click', function() {
        const row = this.closest('tr');
        const doctorId = row.cells[0].textContent;
        document.getElementById('doctor-modal-title').textContent = 'Edit Doctor';
        document.getElementById('doctor-id').value = doctorId;
        
        document.getElementById('doctor-name').value = row.cells[1].textContent;
        document.getElementById('doctor-specialty').value = row.cells[2].textContent;
        document.getElementById('doctor-contact').value = row.cells[3].textContent;
        document.getElementById('doctor-email').value = row.cells[4].textContent;
        document.getElementById('doctor-status').value = row.cells[5].textContent.includes('Active') ? 'Active' : 'Inactive';
        
        document.getElementById('doctor-id').parentElement.style.display = 'block';
        document.getElementById('doctor-id').readOnly = true;
        document.getElementById('doctor-modal').style.display = 'block';
      });
           
      alert('Doctor added successfully!');
    }
    
    // Close modal
    document.getElementById('doctor-modal').style.display = 'none';
  });
  
  // Save Medicine button
  document.getElementById('save-medicine-btn').addEventListener('click', function() {
    const medicineId = document.getElementById('medicine-id').value;
    const medicineName = document.getElementById('medicine-name').value;
    const medicinePrice = document.getElementById('medicine-price').value;
    const medicineStock = document.getElementById('medicine-stock').value;
    const medicineCategory = document.getElementById('medicine-category').value;
    const medicineExpiry = document.getElementById('medicine-expiry').value;
    
    // Validate form data
    if (!medicineName || !medicinePrice || !medicineStock) {
      alert('Please fill in all required fields.');
      return;
    }
    
    // Find if medicine already exists
    let existingRow = null;
    const medicineRows = document.querySelectorAll('#medicines-table tbody tr');
    medicineRows.forEach(row => {
      if (row.cells[0].textContent === medicineId) {
        existingRow = row;
      }
    });
    
    if (existingRow) {
      // Update existing row
      existingRow.cells[1].textContent = medicineName;
      existingRow.cells[2].textContent = '$' + parseFloat(medicinePrice).toFixed(2);
      existingRow.cells[3].textContent = medicineStock;
      
      // Update category and expiry if they exist in the table
      if (existingRow.cells[4]) existingRow.cells[4].textContent = medicineCategory;
      if (existingRow.cells[5]) existingRow.cells[5].textContent = medicineExpiry;
      
      alert('Medicine updated successfully!');
    } else {
      // Add new row
      const medicinesTable = document.querySelector('#medicines-table tbody');
      const newRow = document.createElement('tr');
      
      // Check if the table has category and expiry columns
      const hasCategoryColumn = document.querySelector('#medicines-table th:nth-child(5)') !== null;
      const hasExpiryColumn = document.querySelector('#medicines-table th:nth-child(6)') !== null;
      
      let newRowHTML = `
        <td>${medicineId}</td>
        <td>${medicineName}</td>
        <td>$${parseFloat(medicinePrice).toFixed(2)}</td>
        <td>${medicineStock}</td>
      `;
      
      if (hasCategoryColumn) newRowHTML += `<td>${medicineCategory}</td>`;
      if (hasExpiryColumn) newRowHTML += `<td>${medicineExpiry}</td>`;
      
      newRowHTML += `
        <td>
          <button class="btn edit-medicine-btn" data-id="${medicineId}">Edit</button>
          <button class="btn delete-medicine-btn" data-id="${medicineId}">Delete</button>
        </td>
      `;
      
      newRow.innerHTML = newRowHTML;
      medicinesTable.appendChild(newRow);
      
      // Add event listeners to new buttons
      const newEditBtn = newRow.querySelector('.edit-medicine-btn');
      newEditBtn.addEventListener('click', function() {
        const row = this.closest('tr');
        const medicineId = row.cells[0].textContent;
        document.getElementById('medicine-modal-title').textContent = 'Edit Medicine';
        document.getElementById('medicine-id').value = medicineId;
        
        document.getElementById('medicine-name').value = row.cells[1].textContent;
        document.getElementById('medicine-price').value = row.cells[2].textContent.replace('$', '');
        document.getElementById('medicine-stock').value = row.cells[3].textContent;
        
        if (row.cells[4]) document.getElementById('medicine-category').value = row.cells[4].textContent;
        if (row.cells[5]) document.getElementById('medicine-expiry').value = row.cells[5].textContent;
        
        document.getElementById('medicine-id').parentElement.style.display = 'block';
        document.getElementById('medicine-id').readOnly = true;
        document.getElementById('medicine-modal').style.display = 'block';
      });
      
      
      alert('Medicine added successfully!');
    }
    
    // Close modal
    document.getElementById('medicine-modal').style.display = 'none';
  });
});
// Fix for edit buttons and modal functionality
document.addEventListener('DOMContentLoaded', function() {
  // Patient edit button functionality
  const editPatientButtons = document.querySelectorAll('.edit-patient-btn');
  const patientModal = document.getElementById('patient-modal');
  const patientForm = document.getElementById('patient-form');
  const patientModalTitle = document.getElementById('patient-modal-title');
  
  editPatientButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      const patientId = this.value;
      
      // Find the patient row
      const patientRow = this.closest('tr');
      
      if (patientRow) {
        // Update modal title
        patientModalTitle.textContent = 'Edit Patient';
        
        // Get data from the row
        const cells = patientRow.querySelectorAll('td');
        
        // Populate form fields with the data
        document.getElementById('patient-id').value = cells[0].textContent.trim();
        document.getElementById('patient-name').value = cells[1].textContent.trim();
        document.getElementById('patient-age').value = cells[2].textContent.trim();
        document.getElementById('patient-gender').value = cells[3].textContent.trim();
        document.getElementById('patient-contact').value = cells[4].textContent.trim();
        document.getElementById('patient-address').value = cells[5].textContent.trim();
        
        // Set status value based on the status label
        const statusCell = cells[6].querySelector('.status-label');
        if (statusCell) {
          document.getElementById('patient-status').value = statusCell.textContent.trim();
        }
        
        // Show the modal
        patientModal.style.display = 'block';
      }
    });
  });
  
  // Doctor edit button functionality
  const editDoctorButtons = document.querySelectorAll('.edit-doctor-btn');
  const doctorModal = document.getElementById('doctor-modal');
  const doctorForm = document.getElementById('doctor-form');
  const doctorModalTitle = document.getElementById('doctor-modal-title');
  
  editDoctorButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      const doctorId = this.value;
      
      // Find the doctor row
      const doctorRow = this.closest('tr');
      
      if (doctorRow) {
        // Update modal title
        doctorModalTitle.textContent = 'Edit Doctor';
        
        // Get data from the row
        const cells = doctorRow.querySelectorAll('td');
        
        // Populate form fields with the data
        document.getElementById('doctor-id').value = cells[0].textContent.trim();
        document.getElementById('doctor-name').value = cells[1].textContent.trim();
        document.getElementById('doctor-specialty').value = cells[2].textContent.trim();
        document.getElementById('doctor-contact').value = cells[3].textContent.trim();
        document.getElementById('doctor-email').value = cells[4].textContent.trim();
        
        // Set status value based on the status label
        const statusCell = cells[5].querySelector('.status-label');
        if (statusCell) {
          document.getElementById('doctor-status').value = statusCell.textContent.trim();
        }
        
        // Show the modal
        doctorModal.style.display = 'block';
      }
    });
  });
  
  // Medicine edit button functionality
  const editMedicineButtons = document.querySelectorAll('.edit-medicine-btn');
  const medicineModal = document.getElementById('medicine-modal');
  const medicineForm = document.getElementById('medicine-form');
  const medicineModalTitle = document.getElementById('medicine-modal-title');
  
  editMedicineButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      const medicineId = this.value;
      
      // Find the medicine row
      const medicineRow = this.closest('tr');
      
      if (medicineRow) {
        // Update form action to edit instead of add
        medicineForm.action = medicineForm.action.replace('/add_med/', '/edit_med/');
        
        // Update modal title
        medicineModalTitle.textContent = 'Edit Medicine';
        
        // Get data from the row
        const cells = medicineRow.querySelectorAll('td');
        
        // Populate form fields with the data
        document.getElementById('medicine-id').value = cells[0].textContent.trim();
        document.getElementById('medicine-name').value = cells[1].textContent.trim();
        document.getElementById('medicine-stock').value = cells[3].textContent.trim();
        document.getElementById('medicine-category').value = cells[3].textContent.trim();
        
        // Price without currency symbol if any
        const priceText = cells[2].textContent.trim();
        document.getElementById('medicine-price').value = priceText.replace(/[^0-9.]/g, '');
        
        // Set status from the status label
        const statusCell = cells[4].querySelector('.status-label');
        if (statusCell) {
          document.getElementById('medicine-price').value = statusCell.textContent.trim();
        }
        
        // Show the modal
        medicineModal.style.display = 'block';
      }
    });
  });
  
  // Add New Medicine button functionality
  const addMedicineBtn = document.getElementById('add-medicine-btn');
  if (addMedicineBtn) {
    addMedicineBtn.addEventListener('click', function() {
      // Reset form
      medicineForm.reset();
      
      // Make sure action is set to add
      medicineForm.action = medicineForm.action.replace('/edit_med/', '/add_med/');
      
      // Update modal title
      medicineModalTitle.textContent = 'Add New Medicine';
      
      // Show the modal
      medicineModal.style.display = 'block';
    });
  }
  
  // Close modal functionality for all modals
  const closeBtns = document.querySelectorAll('.close-btn, .cancel-btn');
  closeBtns.forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      
      // Find the parent modal
      const modal = this.closest('.modal');
      if (modal) {
        modal.style.display = 'none';
      }
    });
  });
  
  // Close modal when clicking outside
  window.addEventListener('click', function(e) {
    if (e.target.classList.contains('modal')) {
      e.target.style.display = 'none';
    }
  });
});
// Search functionality for all tables in the system
document.addEventListener('DOMContentLoaded', function() {
  // Get all search input fields
  const searchInputs = document.querySelectorAll('.search-box input');
  
  // Add event listeners to each search input
  searchInputs.forEach(searchInput => {
    searchInput.addEventListener('keyup', function() {
      // Get the parent section to determine which table to search
      const section = this.closest('.content-section');
      if (!section) return;
      
      // Get the table in the current section
      const table = section.querySelector('.custom-table');
      if (!table) return;
      
      // Get all rows except the header
      const rows = table.querySelectorAll('tbody tr');
      
      // Get search term and convert to lowercase
      const searchTerm = this.value.toLowerCase().trim();
      
      // Loop through each row and check if it contains the search term
      rows.forEach(row => {
        let rowVisible = false;
        
        // Get all cells in the current row
        const cells = row.querySelectorAll('td');
        
        // Check each cell text against the search term
        cells.forEach(cell => {
          const cellText = cell.textContent.toLowerCase();
          if (cellText.includes(searchTerm)) {
            rowVisible = true;
          }
        });
        
        // Show or hide the row based on the search result
        row.style.display = rowVisible ? '' : 'none';
      });
    });
  });
  
  // Reset search results when switching between tabs
  const menuItems = document.querySelectorAll('.sidebar-menu a');
  menuItems.forEach(item => {
    item.addEventListener('click', function() {
      // Clear all search inputs
      searchInputs.forEach(input => {
        input.value = '';
        
        // Reset all table rows to visible
        const tables = document.querySelectorAll('.custom-table');
        tables.forEach(table => {
          const rows = table.querySelectorAll('tbody tr');
          rows.forEach(row => {
            row.style.display = '';
          });
        });
      });
    });
  });
});

// For advanced search with filters (if needed in the future)
function advancedSearch(tableId, filters) {
  const table = document.getElementById(tableId);
  if (!table) return;
  
  const rows = table.querySelectorAll('tbody tr');
  
  rows.forEach(row => {
    let matchesAllFilters = true;
    
    // Check each filter against the appropriate column
    for (const [columnIndex, filterValue] of Object.entries(filters)) {
      if (!filterValue) continue; // Skip empty filters
      
      const cell = row.querySelector(`td:nth-child(${parseInt(columnIndex) + 1})`);
      if (!cell) continue;
      
      const cellText = cell.textContent.toLowerCase();
      if (!cellText.includes(filterValue.toLowerCase())) {
        matchesAllFilters = false;
        break;
      }
    }
    
    // Show or hide based on filter match
    row.style.display = matchesAllFilters ? '' : 'none';
  });
}
  </script>
</body>
</html>

